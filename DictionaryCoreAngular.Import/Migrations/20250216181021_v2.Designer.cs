// <auto-generated />
using DictionaryCoreAngular.Import.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DictionaryCoreAngular.Import.Migrations
{
    [DbContext(typeof(DictionaryContext))]
    [Migration("20250216181021_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DictionaryCoreAngular.Import.Context.Dictionary", b =>
                {
                    b.Property<int>("DictionaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DictionaryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DictionaryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Dictionary", (string)null);
                });

            modelBuilder.Entity("DictionaryCoreAngular.Import.Context.DictionarySource", b =>
                {
                    b.Property<int>("DictionarySourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DictionarySourceId"));

                    b.Property<int?>("DictionaryId")
                        .HasColumnType("int");

                    b.Property<int?>("DictionaryTranslationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DictionarySourceId");

                    b.HasIndex("DictionaryId");

                    b.HasIndex("DictionaryTranslationId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DictionarySource", (string)null);
                });

            modelBuilder.Entity("DictionaryCoreAngular.Import.Context.DictionarySourceWord", b =>
                {
                    b.Property<int>("DictionarySourceWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DictionarySourceWordId"));

                    b.Property<int?>("DictionarySourceId")
                        .HasColumnType("int");

                    b.Property<string>("Transcription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WordId")
                        .HasColumnType("int");

                    b.HasKey("DictionarySourceWordId");

                    b.HasIndex("DictionarySourceId");

                    b.HasIndex("WordId", "DictionarySourceId")
                        .IsUnique()
                        .HasFilter("[WordId] IS NOT NULL AND [DictionarySourceId] IS NOT NULL");

                    b.ToTable("DictionarySourceWord", (string)null);
                });

            modelBuilder.Entity("DictionaryCoreAngular.Import.Context.Word", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WordId"));

                    b.Property<int?>("DictionaryId")
                        .HasColumnType("int");

                    b.Property<string>("Transcription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WordText")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WordId");

                    b.HasIndex("DictionaryId");

                    b.HasIndex("WordText", "DictionaryId")
                        .IsUnique()
                        .HasFilter("[DictionaryId] IS NOT NULL");

                    b.ToTable("Word", (string)null);
                });

            modelBuilder.Entity("DictionaryCoreAngular.Import.Context.DictionarySource", b =>
                {
                    b.HasOne("DictionaryCoreAngular.Import.Context.Dictionary", "Dictionary")
                        .WithMany("DictionarySources")
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DictionaryCoreAngular.Import.Context.Dictionary", "DictionaryTranslation")
                        .WithMany("DictionarySourceTranslations")
                        .HasForeignKey("DictionaryTranslationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Dictionary");

                    b.Navigation("DictionaryTranslation");
                });

            modelBuilder.Entity("DictionaryCoreAngular.Import.Context.DictionarySourceWord", b =>
                {
                    b.HasOne("DictionaryCoreAngular.Import.Context.DictionarySource", "DictionarySource")
                        .WithMany("DictionarySourceWords")
                        .HasForeignKey("DictionarySourceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DictionaryCoreAngular.Import.Context.Word", "Word")
                        .WithMany("DictionarySourceWords")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DictionarySource");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("DictionaryCoreAngular.Import.Context.Word", b =>
                {
                    b.HasOne("DictionaryCoreAngular.Import.Context.Dictionary", "Dictionary")
                        .WithMany("Words")
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Dictionary");
                });

            modelBuilder.Entity("DictionaryCoreAngular.Import.Context.Dictionary", b =>
                {
                    b.Navigation("DictionarySourceTranslations");

                    b.Navigation("DictionarySources");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("DictionaryCoreAngular.Import.Context.DictionarySource", b =>
                {
                    b.Navigation("DictionarySourceWords");
                });

            modelBuilder.Entity("DictionaryCoreAngular.Import.Context.Word", b =>
                {
                    b.Navigation("DictionarySourceWords");
                });
#pragma warning restore 612, 618
        }
    }
}
